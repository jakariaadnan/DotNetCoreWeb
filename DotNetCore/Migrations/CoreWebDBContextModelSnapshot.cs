// <auto-generated />
using System;
using DotNetCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotNetCore.Migrations
{
    [DbContext(typeof(CoreWebDBContext))]
    partial class CoreWebDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DotNetCore.Data.Entity.AddressData.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("districtCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("districtName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("districtNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int>("divisionId");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("divisionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.AddressData.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("divisionCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("divisionName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("divisionNameBn");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("bpNo")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(120);

                    b.Property<int?>("isActive");

                    b.Property<string>("otpCode")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.EmployeeInfos.EmployeeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime?>("LPRDate");

                    b.Property<DateTime?>("PRLEndDate");

                    b.Property<DateTime?>("PRLStartDate");

                    b.Property<int?>("activityStatus");

                    b.Property<int?>("bCSBatchId");

                    b.Property<string>("bankAccount")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("batch");

                    b.Property<int?>("bcsPosition");

                    b.Property<string>("birthIdentificationNo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("birthPlace")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("bloodGroup")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("branchId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("dateOfBirth");

                    b.Property<DateTime?>("dateOfPermanent");

                    b.Property<DateTime?>("dateofregularity");

                    b.Property<int?>("departmentId");

                    b.Property<int?>("departmentalPromotionYear");

                    b.Property<string>("designation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("designationCheck");

                    b.Property<int?>("designationsId");

                    b.Property<string>("disability")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("drivingLicense")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("emailAddress")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("emailAddressPersonal")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("employeeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("employeeTypeId");

                    b.Property<string>("extraActivity")
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("extraActivitys");

                    b.Property<string>("extraSkill");

                    b.Property<string>("facebookId")
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("fatherNameBangla")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("fatherNameEnglish")
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("freedomFighter");

                    b.Property<string>("freedomFighterNo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("gender")
                        .HasMaxLength(10);

                    b.Property<string>("govtID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("gpfAcNo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("gpfNomineeName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("height");

                    b.Property<string>("homeDistrict")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("identificationSign")
                        .HasColumnType("nvarchar(350)");

                    b.Property<int?>("isApproved");

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("joiningDateGovtService");

                    b.Property<DateTime?>("joiningDatePresentWorkstation");

                    b.Property<string>("joiningDesignation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("linkdInId")
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("maritalStatus")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("mobileNumberOffice")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("mobileNumberPersonal")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("motherNameBangla")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("motherNameEnglish")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("nameBangla")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("nameEnglish")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("nationalID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("nationality")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("natureOfRequitment")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("otherBankAccountNo")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("pabx")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("passportNo")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("post");

                    b.Property<DateTime?>("promotionDate");

                    b.Property<int?>("rankId");

                    b.Property<string>("rationId")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("religionId");

                    b.Property<string>("salaryAccountNo")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("sectionId");

                    b.Property<string>("sectionName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("seniorityNumber")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("servicePeriod")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("skill")
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("skypeId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("specialSkill")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("telephoneOffice")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("telephoneResidence")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("tribal")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<decimal?>("weight");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("bCSBatchId");

                    b.HasIndex("branchId");

                    b.HasIndex("departmentId");

                    b.HasIndex("designationsId");

                    b.HasIndex("employeeTypeId");

                    b.HasIndex("rankId");

                    b.HasIndex("religionId");

                    b.HasIndex("sectionId");

                    b.ToTable("EmployeeInfos");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.EmployeeInfos.UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("date");

                    b.Property<string>("description");

                    b.Property<int?>("employeeId");

                    b.Property<int?>("isDelete");

                    b.Property<string>("remarks");

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.BCSBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("batchName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("batchNameBn")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("BCSBatches");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("deptCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("deptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("deptNameBn")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("startDate");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("designationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("designationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("designationNameBN")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("empType")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("empTypeBn")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("rankCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("rankName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("rankNameBN")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("shortName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("nameBn")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("shortName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameBN")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("shortName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("shortOrder");

                    b.Property<int?>("specialBranchUnitId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("specialBranchUnitId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.SpecialBranchUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("branchCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("branchUnitName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("branchUnitNameBN")
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtsId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isParent");

                    b.Property<int?>("isdefault");

                    b.Property<int?>("shortOrder");

                    b.Property<int?>("specialBranchUnitId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("districtsId");

                    b.HasIndex("specialBranchUnitId");

                    b.ToTable("SpecialBranchUnits");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.StatusInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<string>("statusName")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("statusNameBn")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("StatusInfos");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.SubBranchUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("branchUnitName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("branchUnitNameBn")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<int?>("specialBranchUnitId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("specialBranchUnitId");

                    b.ToTable("SubBranchUnits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.AddressData.District", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.AddressData.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.EmployeeInfos.EmployeeInfo", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.BCSBatch", "bCSBatch")
                        .WithMany()
                        .HasForeignKey("bCSBatchId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.SpecialBranchUnit", "branch")
                        .WithMany()
                        .HasForeignKey("branchId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.Department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.Designation", "designations")
                        .WithMany()
                        .HasForeignKey("designationsId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.EmployeeType", "employeeType")
                        .WithMany()
                        .HasForeignKey("employeeTypeId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.Rank", "rank")
                        .WithMany()
                        .HasForeignKey("rankId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.Religion", "religion")
                        .WithMany()
                        .HasForeignKey("religionId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.Section", "section")
                        .WithMany()
                        .HasForeignKey("sectionId");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.EmployeeInfos.UserLog", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.EmployeeInfos.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.Section", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.MasterData.SpecialBranchUnit", "specialBranchUnit")
                        .WithMany()
                        .HasForeignKey("specialBranchUnitId");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.SpecialBranchUnit", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.AddressData.District", "districts")
                        .WithMany()
                        .HasForeignKey("districtsId");

                    b.HasOne("DotNetCore.Data.Entity.MasterData.SpecialBranchUnit", "specialBranchUnit")
                        .WithMany()
                        .HasForeignKey("specialBranchUnitId");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.MasterData.SubBranchUnit", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.MasterData.SpecialBranchUnit", "specialBranchUnit")
                        .WithMany()
                        .HasForeignKey("specialBranchUnitId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DotNetCore.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
